@startuml DiaramaAtividade

/'Inicio enum'/

enum TypeEmission {
    Water 
    Air
    Soil
}

enum TypeFlow {
    ElementFlow 
    Product_Flow 
    Waste_Flow
}

/'Fim enum'/

/'Inico das classes'/

/'Esta classe representa os fluxos do trabalho'/
class Flow {
    String name
    TypeFlow type
    String categoria
    double quantidade
    String unidade
    Perdas perda
    Emissap emissao
}

class Perdas {
    double amount_necessary
    String unidade
    double valor_ajustado_waste
    double emissoes
    double emissoes_ajustada
}

/' Aqui guarda os Fluxos de entrada e de saida
Os de entrada corresponde a tudo o que entra para produzir
o produto
Os fluxos de saida a tudo o gerado pela produção

O fator_emissão não até que ponto pode estar cá

class Input_Outputs {
    String name
    typeInput type 
    Flow flow
    double quantidade 
    String unidade
    double fator_emissao
}
'/

/'Classe Input_Output está classe guarda os materiais que são considerados inputs e 
outputs ao mesmo tempo
Nota: Ignorar o comentario acima, era a classe Input_Output antiga
'/
class Input_Outputs {
    String name
    Input material_primary
    Flow flow
    ProcessoAgregado assembly_flow 
    double amount 
    String unidade
}

/'Representas os mateirais a utilizar e outros elementos, tipo energia,
agua, etc

O elementarl Flow, é porque o input tanto pode ser uma energia ou 
recurso naturais
O type é para saber se é energia ou materia-prima
A classe perdas é para saver as perdas relacionadas com o input
'/
class Input  {
    Elemental_Flow elemenentar_flow
    String type
    Emissoes emissao
}

/'Classe Outpur representa os outputs do projeto'/
class Output  {
    Waste_Flow waste_flow  
    Emissoes emissao
}

/'
Esta classe representa os processos unitarios
'/
class ProcessoUnitario {
    String nomePro
    Input input
    Output output
    Flow flow
    Emissao emissao
}

/'
Este classe representaos processos agupados
'/
class ProcessoAgregado {
    String name_processo
    ProcessoUnitario[] processos
    String categoria
    String descricao
    String localizacao
    String unidade
    Emissao emissaoTotal
}

/'
Representa as várias emissão que podem acontecer, do solo, ar e água

Nota: Não sei até que ponto esta classe é necessária
com a existencia da classe perda ou vice-versa
'/
class Emissao {
    String name
    TypeEmission type
    double fator_emissao
    double emissao
    double emissao_ajustado
}

/'
Classe para guardar o consumo de energia em cada processo, provavelmetne apenas os 
processos de produção
'/
class Consumo_Energia {
    Power_Source[] power_source
    double tot_emission
}

/'Daqui para baixo está a representação da tabela de energia do enunciado'/
abstract class Power_Source{
    String name
    double proporcao
    double fator_emissao 
}

/'Energia Primaria --> MJ/kWh
uso de agua --> litros/kWh'/
class Mix_Eletricty extends Power_Source {
    double energia_primaria
    double uso_agua
}

class Weighted_Average extends Power_Source {
    double weighted_average
}

/'Classes a repensar'/

/'Represnta cada etapa de produção'/
class Etapa_Producao {
    ProcessoUnitario etapa
    ProcessoAgregado processo_prod
    double consumo_eletricidade
}

/'Fim das classes a repensar'/
@enduml